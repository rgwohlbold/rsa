(lambda __print, __g, __contextlib, __types, __y: [[[[[[(lambda __after: (lambda __after: [__after() for __g['length'] in [(int(sys.argv[1]))]][0] if (len(sys.argv) > 1) else [__after() for __g['length'] in [(5)]][0])(lambda: [(main(text, length), __after())[1] for __g['text'] in [(input('What would you like to encrypt? '))]][0]) if (__name__ == '__main__') else __after())(lambda: None) for __g['main'], main.__name__ in [(lambda text, length=5: (lambda __l: [[[(__print(('Encrypted:', __l['enc'])), [(__print(__l['dec']), (__print(__l['rsa']), None)[1])[1] for __l['dec'] in [(__l['rsa'].decrypt(__l['enc']))]][0])[1] for __l['enc'] in [(__l['rsa'].encrypt(__l['text']))]][0] for __l['rsa'] in [(RSA(__l['length']))]][0] for __l['text'], __l['length'] in [(text, length)]][0])({}), 'main')]][0] for __g['RSA'] in [((lambda d: d.get('__metaclass__', __g.get('__metaclass__', __types.ClassType))('RSA', (), d))((lambda __l: [[[[[[[[[[[[__l for __l['__str__'], __l['__str__'].__name__ in [(lambda self: (lambda __l: [[[[[[[[__l['result'] for __l['result'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['result'], (('e(pub)\t' + str(__l['self'].d)) + '\n')))]][0] for __l['result'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['result'], (('d(priv)\t' + str(__l['self'].e)) + '\n')))]][0] for __l['result'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['result'], (('phi\t' + str(__l['self'].phi)) + '\n')))]][0] for __l['result'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['result'], (('n\t' + str(__l['self'].n)) + '\n')))]][0] for __l['result'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['result'], (('q\t' + str(__l['self'].q)) + '\n')))]][0] for __l['result'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['result'], (('p\t' + str(__l['self'].p)) + '\n')))]][0] for __l['result'] in [('')]][0] for __l['self'] in [(self)]][0])({}), '__str__')]][0] for __l['decrypt'], __l['decrypt'].__name__ in [(lambda self, nums: (lambda __l: [[(lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [(__l['decrypted'].append(__l['self'].decrypt_num(__l['i'])), __this())[1] for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(__l['nums']), lambda: __l['self'].to_string(__l['decrypted']), []) for __l['decrypted'] in [([])]][0] for __l['self'], __l['nums'] in [(self, nums)]][0])({}), 'decrypt')]][0] for __l['encrypt'], __l['encrypt'].__name__ in [(lambda self, text: (lambda __l: [[[(lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [(__l['encrypted'].append(__l['self'].encrypt_num(__l['i'])), __this())[1] for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(__l['nums']), lambda: __l['encrypted'], []) for __l['encrypted'] in [([])]][0] for __l['nums'] in [(__l['self'].to_nums(__l['text']))]][0] for __l['self'], __l['text'] in [(self, text)]][0])({}), 'encrypt')]][0] for __l['encrypt_num'], __l['encrypt_num'].__name__ in [(lambda self, num: (lambda __l: [(__print((__l['num'], __l['self'].e, __l['self'].n, pow(__l['num'], __l['self'].e, __l['self'].n))), pow(__l['num'], __l['self'].e, __l['self'].n))[1] for __l['self'], __l['num'] in [(self, num)]][0])({}), 'encrypt_num')]][0] for __l['decrypt_num'], __l['decrypt_num'].__name__ in [(lambda self, num: (lambda __l: [(__print((__l['num'], __l['self'].d, __l['self'].n, pow(__l['num'], __l['self'].d, __l['self'].n))), pow(__l['num'], __l['self'].d, __l['self'].n))[1] for __l['self'], __l['num'] in [(self, num)]][0])({}), 'decrypt_num')]][0] for __l['to_nums'], __l['to_nums'].__name__ in [(lambda self, string: (lambda __l: [[[[[[(lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [(lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: [(lambda __after: (__l['blocks'].append(__l['currentBlock']), [[__after() for __l['currentBlock'] in [(0)]][0] for __l['j'] in [(0)]][0])[1] if (__l['j'] == __l['nums_per_block']) else __after())(lambda: __this()) for __l['j'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['j'], 1))]][0])][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, ValueError) and [True for __out[0] in [((__print((("Error: The letter '" + __l['i']) + "' was not found in the alphabet. Please delete it and try again.")), (sys.exit(-1), lambda after: after())[1])[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [([(lambda __after: __after()) for __l['currentBlock'] in [(((__l['currentBlock'] * 100) + __l['self'].alphabet.index(__l['i'])))]][0])]][0]})())))([None]) for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(__l['string']), lambda: (lambda __after: __y(lambda __this: lambda: [[(lambda __after: (__l['blocks'].append(__l['currentBlock']), __after())[1] if (__l['j'] == __l['nums_per_block']) else __after())(lambda: __this()) for __l['j'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['j'], 1))]][0] for __l['currentBlock'] in [(((__l['currentBlock'] * 100) + 0))]][0] if ((__l['j'] < __l['nums_per_block']) and (__l['j'] != 0)) else __after())())(lambda: __l['blocks']), []) for __l['currentBlock'] in [(0)]][0] for __l['j'] in [(0)]][0] for __l['blocks'] in [([])]][0] for __l['nums_per_block'] in [((__l['length'] // 2))]][0] for __l['length'] in [(math.floor(math.log(__l['self'].n, 10)))]][0] for __l['self'], __l['string'] in [(self, string)]][0])({}), 'to_nums')]][0] for __l['to_string'], __l['to_string'].__name__ in [(lambda self, nums: (lambda __l: [[[[(lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [[[(lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [[[[__this() for __l['next'] in [(((__l['next'] - __l['num']) // 100))]][0] for __l['temp'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['temp'], __l['self'].alphabet[__l['num']]))]][0] for __l['num'] in [((__l['next'] % 100))]][0] for __l['j'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(range(__l['nums_per_block'])), lambda: [__this() for __l['string'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__l['string'], __l['temp'][::-1]))]][0], []) for __l['next'] in [(__l['i'])]][0] for __l['temp'] in [('')]][0] for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(__l['nums']), lambda: __l['string'], []) for __l['string'] in [('')]][0] for __l['nums_per_block'] in [((__l['length'] // 2))]][0] for __l['length'] in [(math.floor(math.log(__l['self'].n, 10)))]][0] for __l['self'], __l['nums'] in [(self, nums)]][0])({}), 'to_string')]][0] for __l['choose_e'], __l['choose_e'].__name__ in [(lambda self, phi: (lambda __l: [(lambda __after: 65537 if ((__l['phi'] > 65537) and (math.gcd(__l['phi'], 65537) == 1)) else (lambda __after: 17 if ((__l['phi'] > 17) and (math.gcd(__l['phi'], 17) == 1)) else ([] for [] in []).throw(Error('Invalid phi for this implementation')))(lambda: __after()))(lambda: None) for __l['self'], __l['phi'] in [(self, phi)]][0])({}), 'choose_e')]][0] for __l['random_prime'], __l['random_prime'].__name__ in [(lambda self, length=5: (lambda __l: [[(lambda __after: __y(lambda __this: lambda: [__this() for __l['i'] in [(random.randint((10 ** (__l['length'] - 1)), (10 ** __l['length'])))]][0] if (not __l['self'].is_prime(__l['i'])) else __after())())(lambda: __l['i']) for __l['i'] in [(random.randint((10 ** __l['length']), (10 ** (__l['length'] + 1))))]][0] for __l['self'], __l['length'] in [(self, length)]][0])({}), 'random_prime')]][0] for __l['is_prime'], __l['is_prime'].__name__ in [(lambda self, number: (lambda __l: [(lambda __items, __after, __sentinel: __y(lambda __this: lambda: (lambda __i: [(lambda __after: False if ((__l['number'] % __l['i']) == 0) else __after())(lambda: __this()) for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(range(2, (math.ceil(math.sqrt(__l['number'])) + 1))), lambda: True, []) for __l['self'], __l['number'] in [(self, number)]][0])({}), 'is_prime')]][0] for __l['__init__'], __l['__init__'].__name__ in [(lambda self, length=5: (lambda __l: [(__print('Generating primes...'), [[(__print('Calculating n...'), [[[(__print('Finding inverse...'), [(__print('Done!'), None)[1] for __l['self'].d in [(int(gmpy.invert(__l['self'].e, __l['self'].phi)))]][0])[1] for __l['self'].e in [(__l['self'].choose_e(__l['self'].phi))]][0] for __l['self'].phi in [(((__l['self'].p - 1) * (__l['self'].q - 1)))]][0] for __l['self'].n in [((__l['self'].p * __l['self'].q))]][0])[1] for __l['self'].q in [(__l['self'].random_prime(__l['length']))]][0] for __l['self'].p in [(__l['self'].random_prime(__l['length']))]][0])[1] for __l['self'], __l['length'] in [(self, length)]][0])({}), '__init__')]][0] for __l['alphabet'] in [(' abcdefghijklmnopqrstuvwxyz')]][0])({'__module__': __name__})))]][0] for __g['gmpy'] in [(__import__('gmpy2', __g, __g))]][0] for __g['random'] in [(__import__('random', __g, __g))]][0] for __g['math'] in [(__import__('math', __g, __g))]][0] for __g['sys'] in [(__import__('sys', __g, __g))]][0])(__import__('__builtin__').__dict__['print'], globals(), __import__('contextlib'), __import__('types'), (lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))))
